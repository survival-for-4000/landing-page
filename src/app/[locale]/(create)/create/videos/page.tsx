"use client";

import React, { useEffect, useState, useCallback, useRef } from "react";
import {
  RotateCcw,
  MoreHorizontal,
  ArrowUpRight,
  ArrowUp,
  Loader2,
  Sparkles,
  Check,
  Wifi,
  WifiOff,
  Settings,
} from "lucide-react";
import { Heart, Share2, Download } from "lucide-react";
// import React, { useEffect, useState, useCallback } from "react";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { useAuth } from "@/hooks/useAuth";
import { useSSE } from "@/components/SSEProvider";
import { ModernVideoCard } from "@/components/ModernVideoCard";
import { config } from "@/config";

export default function CreatePage() {
  const { isLoggedIn, userName, memberId } = useAuth();
  const { lastNotification, isConnected, notifications } = useSSE();

  const listRef = useRef(null);

  const [prompt, setPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [taskList, setTaskList] = useState([]);
  const [lastFetchTime, setLastFetchTime] = useState("");

  // Î™®Îç∏ Í¥ÄÎ†® ÏÉÅÌÉú
  const [availableModels, setAvailableModels] = useState([]);
  const [selectedModel, setSelectedModel] = useState("");
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);
  const [tempModel, setTempModel] = useState("");

  // ÌòÑÏû¨ RadioGroup ÎåÄÏã† ÏÑ†ÌÉùÎêú Î™®Îç∏ Í∞ùÏ≤¥ Ï†ÑÏ≤¥Î•º Ï†ÄÏû•
  const [selectedModelData, setSelectedModelData] = useState(null);
  const [tempSelectedModel, setTempSelectedModel] = useState(null);

  const [selectedTab, setSelectedTab] = useState("STYLE"); // ÎòêÎäî "CHARACTER"
  const [styleModels, setStyleModels] = useState([]);
  const [characterModels, setCharacterModels] = useState([]);

  // Î™®Îã¨ Í¥ÄÎ†® ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedMediaIndex, setSelectedMediaIndex] = useState(0);
  const [allMediaItems, setAllMediaItems] = useState([]);

  // Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Í¥ÄÎ†® ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [nextCursor, setNextCursor] = useState(null);

  // Î™®Îç∏ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
  // Îëê Í∞úÏùò APIÎ•º Î™®Îëê Ìò∏Ï∂úÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
  const fetchAvailableModels = async () => {
    try {
      // STYLE Î™®Îç∏ Ï°∞Ìöå
      const styleResponse = await fetch(
        `${config.apiUrl}/api/lora?mediaType=VIDEO&styleType=STYLE`,
        { credentials: "include" }
      );
      const styleModels = await styleResponse.json();
      setStyleModels(styleModels);

      // CHARACTER Î™®Îç∏ Ï°∞Ìöå
      const characterResponse = await fetch(
        `${config.apiUrl}/api/lora?mediaType=VIDEO&styleType=CHARACTER`,
        { credentials: "include" }
      );
      const characterModels = await characterResponse.json();
      setCharacterModels(characterModels);

      // Ï†ÑÏ≤¥ Î™®Îç∏ Î™©Î°ù ÏÑ§Ï†ï (ÌòÑÏû¨ ÌÉ≠Ïóê Îî∞Îùº)
      const currentModels =
        selectedTab === "STYLE" ? styleModels : characterModels;
      setAvailableModels(currentModels);

      // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï Î°úÏßÅÎèÑ ÏàòÏ†ï ÌïÑÏöî
    } catch (error) {
      console.error("‚ùå Î™®Îç∏ Î™©Î°ù Î°úÎìú Ïã§Ìå®:", error);
    }
  };

  // üî• Ïª§ÏÑú ÎîîÏΩîÎî© Î∞è Î∞±ÏóîÎìú Î¨∏Ï†ú ÌôïÏù∏ ÎèÑÍµ¨
  const debugCursor = (cursor) => {
    if (!cursor) return "Ïª§ÏÑú ÏóÜÏùå";

    try {
      const decoded = atob(cursor);
      const parts = decoded.split(" - ");

      if (parts.length === 2) {
        const baseTime = parts[0].replace(/###/g, "");
        const requestTime = parts[1];

        return {
          raw: decoded,
          baseTime: new Date(baseTime).toISOString(),
          requestTime: new Date(requestTime).toISOString(),
          baseTimeKST: new Date(baseTime).toLocaleString("ko-KR"),
          requestTimeKST: new Date(requestTime).toLocaleString("ko-KR"),
        };
      }
    } catch (e) {
      return "ÎîîÏΩîÎî© Ïã§Ìå®: " + e.message;
    }
  };

  // üî• ÏàòÏ†ïÎêú fetchTaskList - useRefÎ°ú ÏµúÏã† ÏÉÅÌÉú Ï∞∏Ï°∞
  const taskListRef = useRef([]);
  const loadingRef = useRef(false);

  // üî• Î¨∏Ï†ú Ìï¥Í≤∞: nextCursorÎ•º refÎ°ú Í¥ÄÎ¶¨
  const nextCursorRef = useRef(null);

  const hasMoreRef = useRef(true);

  // 2. hasMore ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú ref ÎèôÍ∏∞Ìôî
  useEffect(() => {
    hasMoreRef.current = hasMore;
    console.log("üîÑ hasMore ref ÏóÖÎç∞Ïù¥Ìä∏:", hasMore);
  }, [hasMore]);

  // 3. Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îã®ÏàúÌôî (ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ ÎπÑÏö∞Í∏∞)
  useEffect(() => {
    const handleScroll = () => {
      // refÎ°ú ÏµúÏã† ÏÉÅÌÉú ÌôïÏù∏
      if (loadingRef.current || !hasMoreRef.current) {
        console.log("‚ùå Ïä§ÌÅ¨Î°§ Î¨¥Ïãú:", {
          loading: loadingRef.current,
          hasMore: hasMoreRef.current,
          taskListLength: taskListRef.current.length,
        });
        return;
      }

      const scrollTop = document.documentElement.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight;
      const clientHeight = document.documentElement.clientHeight;

      // Îçî ÎØºÍ∞êÌïòÍ≤å - ÌïòÎã® 150px ÏßÄÏ†êÏóêÏÑú Ìä∏Î¶¨Í±∞
      const threshold = 150;
      const isNearBottom = scrollTop + clientHeight >= scrollHeight - threshold;

      console.log("üìè Ïä§ÌÅ¨Î°§ ÏÉÅÌÉú:", {
        scrollTop: Math.round(scrollTop),
        scrollHeight: Math.round(scrollHeight),
        clientHeight: Math.round(clientHeight),
        remainingDistance: Math.round(scrollHeight - scrollTop - clientHeight),
        threshold,
        isNearBottom,
        loading: loadingRef.current,
        hasMore: hasMoreRef.current,
        taskListLength: taskListRef.current.length,
      });

      if (isNearBottom) {
        console.log(
          "üöÄ Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Ìä∏Î¶¨Í±∞! ÌòÑÏû¨:",
          taskListRef.current.length,
          "Í∞ú"
        );
        fetchTaskList(false);
      }
    };

    // ÎîîÎ∞îÏö¥Ïã± Ï∂îÍ∞ÄÌïòÏó¨ ÏÑ±Îä• ÏµúÏ†ÅÌôî
    let timeoutId;
    const debouncedHandleScroll = () => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(handleScroll, 100);
    };

    window.addEventListener("scroll", debouncedHandleScroll, { passive: true });

    return () => {
      clearTimeout(timeoutId);
      window.removeEventListener("scroll", debouncedHandleScroll);
    };
  }, []); // üî• ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ ÏôÑÏ†ÑÌûà ÎπÑÏö∞Í∏∞

  // 4. fetchTaskListÏóêÏÑú ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ ÎπÑÏö∞Í∏∞
  const fetchTaskList = useCallback(async (reset = false) => {
    if (loadingRef.current) {
      console.log("‚ùå Ïù¥ÎØ∏ Î°úÎî© Ï§ëÏù¥ÎØÄÎ°ú ÏöîÏ≤≠ Î¨¥Ïãú");
      return;
    }

    loadingRef.current = true;
    setLoading(true);

    try {
      console.log("üîÑ Task list ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...");

      // üî• Ï¥àÍ∏∞ Î°úÎî© Ïãú Îçî ÎßéÏùÄ Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ (Ïä§ÌÅ¨Î°§ Í∞ÄÎä•ÌïòÎèÑÎ°ù)
      const size = reset ? "3" : "2"; // Ï≤´ Î°úÎî©ÏùÄ 5Í∞ú, Ïù¥ÌõÑÎäî 3Í∞úÏî©
      const params = new URLSearchParams({ size });

      const currentCursor = nextCursorRef.current;

      if (!reset && currentCursor) {
        params.append("nextPageCursor", currentCursor);
        console.log(
          "üìù ÌòÑÏû¨ Ïª§ÏÑú Ï†ÑÎã¨:",
          currentCursor.substring(0, 30) + "..."
        );
      } else {
        console.log(
          "üìù Ï≤´ Î≤àÏß∏ ÏöîÏ≤≠ - 6Í∞ú Îç∞Ïù¥ÌÑ∞ Î°úÎìúÌïòÏó¨ Ïä§ÌÅ¨Î°§ Í∞ÄÎä•ÌïòÍ≤å ÎßåÎì§Í∏∞"
        );
      }

      const url = `${config.apiUrl}/api/videos/task?${params}`;
      console.log("üì° API ÏöîÏ≤≠ URL:", url);

      const res = await fetch(url, { credentials: "include" });

      if (!res.ok) {
        throw new Error(`HTTP ${res.status}: ${res.statusText}`);
      }

      const json = await res.json();
      console.log("üì¶ Ï†ÑÏ≤¥ ÏùëÎãµ:", json);
      const content = json?.data?.content || [];

      console.log(
        "üìã Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ IDÎì§:",
        content.map((item) => item.task.id)
      );

      if (reset) {
        console.log("üîÑ Reset: Ï†ÑÏ≤¥ ÍµêÏ≤¥");
        taskListRef.current = content;
        setTaskList(content);
      } else {
        console.log("‚ûï Append: Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Ïóê Ï∂îÍ∞Ä");
        const existingIds = new Set(taskListRef.current.map((t) => t.task.id));
        const newItems = content.filter(
          (item) => !existingIds.has(item.task.id)
        );

        console.log("üîç Ïã§Ï†ú Ï∂îÍ∞ÄÎê† ÏÉà Ìï≠Î™©:", newItems.length, "Í∞ú");

        if (newItems.length === 0 && content.length > 0) {
          console.warn("‚ö†Ô∏è Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ - hasMoreÎ•º falseÎ°ú ÏÑ§Ï†ï");
          setHasMore(false);
          hasMoreRef.current = false;
          loadingRef.current = false;
          setLoading(false);
          return;
        }

        const updatedList = [...taskListRef.current, ...newItems];
        taskListRef.current = updatedList;
        setTaskList(updatedList);
      }

      // ÏÉà Ïª§ÏÑú Ï≤òÎ¶¨
      const newNextCursor =
        json?.data?.nextPageCursor || json?.data?.nextCursor;
      console.log("üîç ÏÉà Ïª§ÏÑú:", newNextCursor ? "ÏûàÏùå" : "ÏóÜÏùå");

      setNextCursor(newNextCursor);
      nextCursorRef.current = newNextCursor;
      setHasMore(!!newNextCursor);
      hasMoreRef.current = !!newNextCursor;

      console.log(
        "‚úÖ Task list ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:",
        content.length,
        "Í∞ú Ìï≠Î™© Î∞õÏùå"
      );
      console.log("üìä ÌòÑÏû¨ Ï†ÑÏ≤¥ taskList Í∏∏Ïù¥:", taskListRef.current.length);

      // üî• Î°úÎî© ÌõÑ Ïä§ÌÅ¨Î°§ Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨
      setTimeout(() => {
        const scrollHeight = document.documentElement.scrollHeight;
        const clientHeight = document.documentElement.clientHeight;
        console.log("üì∫ Î°úÎî© ÌõÑ Ïä§ÌÅ¨Î°§ ÏÉÅÌÉú:", {
          scrollHeight,
          clientHeight,
          canScroll: scrollHeight > clientHeight,
          itemCount: taskListRef.current.length,
        });
      }, 100);
    } catch (error) {
      console.error("‚ùå Task list fetch failed:", error);
      setHasMore(false);
      hasMoreRef.current = false;
    } finally {
      loadingRef.current = false;
      setLoading(false);
    }
  }, []);

  // 5. ÎîîÎ≤ÑÍπÖÏö© ÌÖåÏä§Ìä∏ Ìï®ÏàòÎì§ (windowÏóê ÎÖ∏Ï∂ú)
  //   useEffect(() => {
  //     window.testScrollToBottom = () => {
  //       const scrollHeight = document.documentElement.scrollHeight;
  //       const clientHeight = document.documentElement.clientHeight;

  //       console.log("üîΩ Í∞ïÏ†ú Ïä§ÌÅ¨Î°§ Ï†Ñ ÏÉÅÌÉú:", {
  //         scrollHeight,
  //         clientHeight,
  //         canScroll: scrollHeight > clientHeight,
  //         currentTaskCount: taskListRef.current.length,
  //         hasMore: hasMoreRef.current,
  //       });

  //       // Ïä§ÌÅ¨Î°§ Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏
  //       if (scrollHeight <= clientHeight) {
  //         console.warn("‚ö†Ô∏è Ïä§ÌÅ¨Î°§Ìï† Ïàò ÏóÜÏùå - ÏΩòÌÖêÏ∏†Í∞Ä ÌôîÎ©¥Î≥¥Îã§ ÏûëÏùå");
  //         return;
  //       }

  //       window.scrollTo({
  //         top: scrollHeight - clientHeight - 50,
  //         behavior: "smooth",
  //       });
  //     };

  //     window.testManualLoad = () => {
  //       console.log("üîß ÏàòÎèô Î°úÎìú Ìä∏Î¶¨Í±∞");
  //       console.log("ÌòÑÏû¨ ÏÉÅÌÉú:", {
  //         taskListLength: taskListRef.current.length,
  //         loading: loadingRef.current,
  //         hasMore: hasMoreRef.current,
  //         nextCursor: nextCursorRef.current ? "ÏûàÏùå" : "ÏóÜÏùå",
  //       });
  //       fetchTaskList(false);
  //     };

  //     return () => {
  //       delete window.testScrollToBottom;
  //       delete window.testManualLoad;
  //     };
  //   }, []);

  // üî• taskList Î≥ÄÍ≤Ω Ïãú ref ÎèôÍ∏∞Ìôî
  useEffect(() => {
    taskListRef.current = taskList;
  }, [taskList]);

  // üî• Î∞±ÏóîÎìú Í∞úÎ∞úÏûêÏóêÍ≤å Ï†úÍ≥µÌï† ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥
  const generateBackendDebugInfo = () => {
    console.log("üîß Î∞±ÏóîÎìú Í∞úÎ∞úÏûêÏö© ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥:");
    console.log("1. ÌòÑÏû¨ Ïª§ÏÑú:", nextCursor);
    console.log("2. Ïª§ÏÑú Î∂ÑÏÑù:", debugCursor(nextCursor));
    console.log("3. ÌòÑÏû¨ taskList Í∏∏Ïù¥:", taskList.length);
    console.log(
      "4. ÎßàÏßÄÎßâ Ìï≠Î™© ÏÉùÏÑ±ÏãúÍ∞Ñ:",
      taskList.length > 0
        ? taskList[taskList.length - 1].task.createdAt
        : "ÏóÜÏùå"
    );
    console.log(
      "5. Î¨∏Ï†ú: Ïª§ÏÑúÏùò baseTimeÏù¥ Ìï≠ÏÉÅ Í≥†Ï†ïÎêòÏñ¥ ÏûàÏñ¥ Í∞ôÏùÄ Îç∞Ïù¥ÌÑ∞Îßå Î∞òÌôòÎê®"
    );
    console.log(
      "6. Ìï¥Í≤∞Î∞©Ïïà: Ïª§ÏÑú ÏÉùÏÑ± Ïãú ÎßàÏßÄÎßâ Ï°∞ÌöåÎêú Îç∞Ïù¥ÌÑ∞Ïùò createdAtÏùÑ baseTimeÏúºÎ°ú ÏÇ¨Ïö©Ìï¥Ïïº Ìï®"
    );
  };

  const handlePromptSubmit = async () => {
    if (!prompt.trim()) return;
    if (!selectedModel) {
      alert("Î™®Îç∏ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    console.log("üöÄ ÎπÑÎîîÏò§ ÏÉùÏÑ± ÏöîÏ≤≠:", prompt, "Î™®Îç∏:", selectedModel);

    const tempId = Date.now();
    const optimisticTask = {
      task: {
        id: tempId,
        prompt,
        status: "IN_PROGRESS",
      },
      image: null,
    };

    setTaskList((prev) => [optimisticTask, ...prev]);
    setIsGenerating(true);

    try {
      const response = await fetch(`${config.apiUrl}/api/videos/create`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ prompt, lora: selectedModel }),
      });

      console.log("üì§ API ÏöîÏ≤≠ ÏôÑÎ£å, ÏùëÎãµ ÏÉÅÌÉú:", response.status);

      if (response.ok) {
        console.log("‚úÖ ÎπÑÎîîÏò§ ÏÉùÏÑ± ÏöîÏ≤≠ ÏÑ±Í≥µ! SSE ÏïåÎ¶º ÎåÄÍ∏∞ Ï§ë...");
        // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏôÄ ÎèôÍ∏∞Ìôî
        setTimeout(() => fetchTaskList(), 1000);
      } else {
        console.error("‚ùå API ÏöîÏ≤≠ Ïã§Ìå®:", response.statusText);
      }
    } catch (e) {
      console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨:", e);
      alert("ÏöîÏ≤≠ Ïã§Ìå®");
      setTaskList((prev) => prev.filter((task) => task.task.id !== tempId));
    } finally {
      setIsGenerating(false);
      setPrompt(""); // ÌîÑÎ°¨ÌîÑÌä∏ Ï¥àÍ∏∞Ìôî
    }
  };

  // üî• ÏûêÎèô Î°úÎî© Ï†úÍ±∞ - Ï¥àÍ∏∞Ïóê 3Í∞úÎßå Î°úÎìúÌïòÍ≥† ÎÅù
  useEffect(() => {
    const initializeData = async () => {
      console.log("üöÄ Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë");
      await fetchTaskList(true); // Ï≤´ Î≤àÏß∏ Î∞∞Ïπò (3Í∞úÎßå)
      console.log("‚úÖ Ï¥àÍ∏∞ Î°úÎî© ÏôÑÎ£å - Ïù¥Ï†ú ÏÇ¨Ïö©ÏûêÍ∞Ä Ïä§ÌÅ¨Î°§Ìï¥Ïïº Ìï®");
    };

    initializeData();
    fetchAvailableModels();
  }, []);

  // üî• ÏàòÏ†ïÎêú Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ - useCallback ÏóÜÏù¥ ÏßÅÏ†ë Ï†ïÏùò
  //   useEffect(() => {
  //     const handleScroll = () => {
  //       // refÎ°ú ÏµúÏã† ÏÉÅÌÉú ÌôïÏù∏
  //       if (loadingRef.current || !hasMore) {
  //         console.log("‚ùå Ïä§ÌÅ¨Î°§ Î¨¥Ïãú:", {
  //           loading: loadingRef.current,
  //           hasMore,
  //           taskListLength: taskListRef.current.length,
  //         });
  //         return;
  //       }

  //       const scrollTop = document.documentElement.scrollTop;
  //       const scrollHeight = document.documentElement.scrollHeight;
  //       const clientHeight = document.documentElement.clientHeight;

  //       // üî• ÌÖåÏä§Ìä∏Ïö©: Îçî ÎØºÍ∞êÌïòÍ≤å - ÌïòÎã® 100px ÏßÄÏ†êÏóêÏÑú Ìä∏Î¶¨Í±∞
  //       const threshold = 100;
  //       const isNearBottom = scrollTop + clientHeight >= scrollHeight - threshold;

  //       console.log("üìè Ïä§ÌÅ¨Î°§ ÏÉÅÌÉú:", {
  //         scrollTop: Math.round(scrollTop),
  //         scrollHeight: Math.round(scrollHeight),
  //         clientHeight: Math.round(clientHeight),
  //         remainingDistance: Math.round(scrollHeight - scrollTop - clientHeight),
  //         threshold,
  //         isNearBottom,
  //         loading: loadingRef.current,
  //         hasMore,
  //         taskListLength: taskListRef.current.length,
  //       });

  //       if (isNearBottom) {
  //         console.log(
  //           "üöÄ Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Ìä∏Î¶¨Í±∞! ÌòÑÏû¨:",
  //           taskListRef.current.length,
  //           "Í∞ú"
  //         );
  //         fetchTaskList(false);
  //       }
  //     };

  //     // ÎîîÎ∞îÏö¥Ïä§ Ï†úÍ±∞ÌïòÍ≥† ÏßÅÏ†ë Ìò∏Ï∂ú (ÌÖåÏä§Ìä∏Ïö©)
  //     window.addEventListener("scroll", handleScroll);

  //     return () => {
  //       window.removeEventListener("scroll", handleScroll);
  //     };
  //   }, [hasMore, fetchTaskList]); // loading ÏùòÏ°¥ÏÑ± Ï†úÍ±∞

  // üî• ÎîîÎ≤ÑÍπÖÏö© ÏÉÅÌÉú Î°úÍ∑∏ Í∞ïÌôî
  useEffect(() => {
    console.log("üìä ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:", {
      loading,
      hasMore,
      nextCursor: nextCursor
        ? `ÏûàÏùå (${nextCursor.substring(0, 20)}...)`
        : "ÏóÜÏùå",
      taskListLength: taskList.length,
      taskIds: taskList.map((t) => t.task.id).slice(0, 5), // Ï≤òÏùå 5Í∞ú IDÎßå ÌëúÏãú
    });
  }, [loading, hasMore, nextCursor, taskList.length]);

  // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ ÌïòÎÇòÎ°ú ÌÜµÏùº (Ï†ÑÏó≠ Ïä§ÌÅ¨Î°§ ÏÇ¨Ïö©)
  // üî• ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú ÏÉÅÌÉú Î°úÍ∑∏ Í∞ïÌôî
  //   useEffect(() => {
  //     console.log("üìä Î¨¥ÌïúÏä§ÌÅ¨Î°§ ÏÉÅÌÉú:", {
  //       loading,
  //       hasMore,
  //       nextCursor: nextCursor
  //         ? `ÏûàÏùå (${nextCursor.substring(0, 20)}...)`
  //         : "ÏóÜÏùå",
  //       taskListLength: taskList.length,
  //     });
  //   }, [loading, hasMore, nextCursor, taskList.length]);

  // üî• Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Í∞úÏÑ† - Í∞ïÏ†úÎ°ú Ïä§ÌÅ¨Î°§ Í∞ÄÎä•ÌïòÍ≤å ÎßåÎì§Í∏∞
  //   useEffect(() => {
  //     const initializeData = async () => {
  //       console.log("üöÄ Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë");
  //       await fetchTaskList(true); // Ï≤´ Î≤àÏß∏ Î∞∞Ïπò (3Í∞ú)
  //     };

  //     initializeData();
  //     fetchAvailableModels();
  //   }, []); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ ÎπÑÏö∞Í∏∞

  // üî• ÌÖåÏä§Ìä∏Ïö© ÎîîÎ≤ÑÍπÖ Ìï®ÏàòÎì§ Í∞úÏÑ†
  //   const testScrollToBottom = () => {
  //     const scrollHeight = document.documentElement.scrollHeight;
  //     const clientHeight = document.documentElement.clientHeight;

  //     console.log("üîΩ Í∞ïÏ†ú Ïä§ÌÅ¨Î°§ Ï†Ñ ÏÉÅÌÉú:", {
  //       scrollHeight,
  //       clientHeight,
  //       canScroll: scrollHeight > clientHeight,
  //       currentTaskCount: taskListRef.current.length,
  //     });

  //     window.scrollTo({
  //       top: scrollHeight - clientHeight - 50, // Î∞îÎã•ÏóêÏÑú 50px ÏúÑÎ°ú
  //       behavior: "smooth",
  //     });

  //     // Ïä§ÌÅ¨Î°§ ÌõÑ ÏÉÅÌÉú Ï≤¥ÌÅ¨
  //     setTimeout(() => {
  //       const newScrollTop = document.documentElement.scrollTop;
  //       console.log("üîΩ Ïä§ÌÅ¨Î°§ ÌõÑ ÏúÑÏπò:", newScrollTop);
  //     }, 1000);
  //   };

  //   const testManualLoad = () => {
  //     console.log("üîß ÏàòÎèô Î°úÎìú Ìä∏Î¶¨Í±∞");
  //     console.log("üîß ÌòÑÏû¨ ÏÉÅÌÉú:", {
  //       taskListLength: taskListRef.current.length,
  //       loading: loadingRef.current,
  //       hasMore,
  //       nextCursor: nextCursor ? "ÏûàÏùå" : "ÏóÜÏùå",
  //     });
  //     fetchTaskList(false);
  //   };

  //   const testCheckStatus = () => {
  //     const scrollHeight = document.documentElement.scrollHeight;
  //     const clientHeight = document.documentElement.clientHeight;
  //     const scrollTop = document.documentElement.scrollTop;

  //     console.log("üìä ÌòÑÏû¨ Ï†ÑÏ≤¥ ÏÉÅÌÉú:", {
  //       taskListLength: taskListRef.current.length,
  //       loading: loadingRef.current,
  //       hasMore,
  //       nextCursor: nextCursor ? "ÏûàÏùå" : "ÏóÜÏùå",
  //       scrollHeight,
  //       clientHeight,
  //       scrollTop,
  //       canScroll: scrollHeight > clientHeight,
  //       scrollPercentage:
  //         scrollHeight > clientHeight
  //           ? Math.round((scrollTop / (scrollHeight - clientHeight)) * 100) + "%"
  //           : "Ïä§ÌÅ¨Î°§ Î∂àÍ∞Ä",
  //       remainingDistance: scrollHeight - scrollTop - clientHeight,
  //     });
  //   };

  useEffect(() => {
    const currentModels =
      selectedTab === "STYLE" ? styleModels : characterModels;
    setAvailableModels(currentModels);
  }, [selectedTab, styleModels, characterModels]);

  useEffect(() => {
    // ÏôÑÎ£åÎêú Ìï≠Î™©Îì§Îßå ÌïÑÌÑ∞ÎßÅÌï¥ÏÑú Ï†ÄÏû•
    const completedItems = taskList.filter(
      (item) => item.task.status === "COMPLETED" && item.image?.url
    );
    setAllMediaItems(completedItems);
  }, [taskList]);

  // SSE ÏïåÎ¶º Ï≤òÎ¶¨
  useEffect(() => {
    console.log("üîÑ lastNotification Î≥ÄÍ≤Ω Í∞êÏßÄ:", lastNotification);

    if (lastNotification) {
      console.log("üì® ÏÉà SSE ÏïåÎ¶º ÏàòÏã†:", {
        id: lastNotification.id,
        type: lastNotification.type,
        status: lastNotification.status,
        message: lastNotification.message,
      });

      if (
        lastNotification.status === "SUCCESS" &&
        lastNotification.type === "video"
      ) {
        console.log("üé¨ ÎπÑÎîîÏò§ ÏÉùÏÑ± ÏôÑÎ£å! ÌôîÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®...");
        fetchTaskList();

        // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º (Í∂åÌïúÏù¥ ÏûàÎã§Î©¥)
        if ("Notification" in window && Notification.permission === "granted") {
          new Notification("ÎπÑÎîîÏò§ ÏÉùÏÑ± ÏôÑÎ£å!", {
            body: lastNotification.message,
            icon: "/favicon.ico",
          });
        }
      } else {
        console.log("‚ö†Ô∏è Ï°∞Í±¥ Î∂àÏùºÏπò:", {
          status: lastNotification.status,
          type: lastNotification.type,
          statusMatch: lastNotification.status === "SUCCESS",
          typeMatch: lastNotification.type === "video",
        });
      }
    }
  }, [lastNotification]);

  const handleConfirm = () => {
    setSelectedModelData(tempSelectedModel);
    setSelectedModel(tempSelectedModel?.modelName || "");
    setIsPopoverOpen(false);
  };

  const handleCancel = () => {
    setTempSelectedModel(selectedModelData);
    setIsPopoverOpen(false);
  };

  const handleMediaClick = (clickedItem) => {
    const completedItems = taskList.filter(
      (item) => item.task.status === "COMPLETED" && item.image?.url
    );
    const index = completedItems.findIndex(
      (item) => item.task.id === clickedItem.task.id
    );
    setSelectedMediaIndex(index);
    setAllMediaItems(completedItems);
    setIsModalOpen(true);
  };

  //   const getDisplayText = () => {
  //     return `${selectedType.toUpperCase()} ‚Ä¢ ${selectedModel.toUpperCase()} ‚Ä¢ ${selectedRatio}`;
  //   };

  if (!isLoggedIn) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-gray-500">Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.</p>
      </div>
    );
  }

  return (
    <>
      {/* SSE ÏÉÅÌÉú ÌëúÏãú (Í∞úÎ∞úÏö©) */}
      <div className="fixed top-4 right-4 z-50 bg-black/80 text-white px-3 py-2 rounded-lg text-xs">
        <div className="flex items-center gap-2">
          {isConnected ? (
            <>
              <Wifi className="w-3 h-3 text-green-400" />
              <span>SSE Ïó∞Í≤∞Îê® (ID: {memberId})</span>
            </>
          ) : (
            <>
              <WifiOff className="w-3 h-3 text-red-400" />
              <span>SSE Ïó∞Í≤∞ ÎÅäÏñ¥Ïßê</span>
            </>
          )}
        </div>
        {lastFetchTime && (
          <div className="text-gray-400 mt-1">
            ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {lastFetchTime}
          </div>
        )}
        <div className="text-gray-400">Ï¥ù ÏïåÎ¶º: {notifications.length}Í∞ú</div>
      </div>

      <div
        ref={listRef}
        className="w-full p-6 space-y-6 pb-32"
        style={{
          minHeight: "auto",
          height: "auto",
          overflow: "visible",
        }}
      >
        {taskList.length === 0 ? (
          <div className="text-center py-12 text-gray-500">
            <p>ÏïÑÏßÅ ÏÉùÏÑ±Îêú ÏòÅÏÉÅÏù¥ ÏóÜÏäµÎãàÎã§.</p>
            <p className="text-sm mt-2">
              ÏïÑÎûòÏóêÏÑú ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏûÖÎ†•Ìï¥ ÏòÅÏÉÅÏùÑ ÏÉùÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!
            </p>
          </div>
        ) : (
          taskList.map((item) => (
            <div key={item.task.id} className="max-w-2xl mx-auto mb-8">
              {/* ÌîÑÎ°¨ÌîÑÌä∏ ÌÖçÏä§Ìä∏ */}
              <div className="mb-4">
                <p className="text-gray-700 text-base leading-relaxed">
                  {item.task.prompt}
                </p>
              </div>

              {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
              <div className="flex items-center gap-3 mb-4">
                <Button
                  variant="secondary"
                  size="sm"
                  className="rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700"
                >
                  <RotateCcw className="w-4 h-4 mr-2" />
                  Show More
                </Button>
                <Button
                  variant="secondary"
                  size="sm"
                  className="rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  Brainstorm
                </Button>
                <Button
                  variant="secondary"
                  size="sm"
                  className="rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700"
                >
                  üí¨ Reply
                </Button>
                <Button variant="ghost" size="sm" className="rounded-full">
                  <MoreHorizontal className="w-4 h-4" />
                </Button>
              </div>

              {/* ÎπÑÎîîÏò§/ÏÉÅÌÉú ÌëúÏãú */}
              {item.task.status === "IN_PROGRESS" ? (
                <div className="w-full aspect-video bg-gradient-to-br from-blue-50 to-purple-50 flex flex-col items-center justify-center border-2 border-dashed border-blue-200 rounded-2xl">
                  <div className="flex items-center space-x-3 mb-4">
                    <Loader2 className="w-6 h-6 animate-spin text-blue-500" />
                    <Sparkles className="w-5 h-5 text-purple-500 animate-pulse" />
                  </div>
                  <p className="text-sm text-gray-500">ÏòÅÏÉÅ ÏÉùÏÑ± Ï§ë...</p>
                  <p className="text-xs text-gray-400 mt-2">
                    SSE ÏïåÎ¶ºÏùÑ Í∏∞Îã§Î¶¨Îäî Ï§ë
                  </p>
                </div>
              ) : item.task.status === "COMPLETED" && item.image?.url ? (
                // Í∏∞Ï°¥ ModernVideoCard Î∂ÄÎ∂ÑÏùÑ Ïù¥Î†áÍ≤å ÍµêÏ≤¥
                <div
                  className="relative rounded-2xl overflow-hidden shadow-lg cursor-pointer group"
                  onClick={() => handleMediaClick(item)}
                >
                  <ModernVideoCard
                    videoUrl={item.image.url}
                    prompt={item.task.prompt}
                    taskId={item.task.id}
                    createdAt={item.task.createdAt}
                    isNew={true}
                    variant="cinematic"
                  />
                  {/* Ìò∏Î≤Ñ Ìö®Í≥º */}
                  <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors pointer-events-none" />
                </div>
              ) : item.task.status === "FAILED" ? (
                <div className="w-full aspect-video bg-gradient-to-br from-red-50 to-orange-50 flex flex-col items-center justify-center border-2 border-dashed border-red-200 rounded-2xl">
                  <div className="flex items-center space-x-3 mb-4">
                    <div className="w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">‚úï</span>
                    </div>
                  </div>
                  <p className="text-sm text-red-600 font-medium">
                    ÏòÅÏÉÅ ÏÉùÏÑ± Ïã§Ìå®
                  </p>
                  <p className="text-xs text-red-400 mt-2">Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî</p>
                </div>
              ) : (
                <div className="text-red-500 p-4 bg-red-50 rounded-2xl">
                  <p>‚ùå ÏÉÅÌÉú: {item.task.status}</p>
                  <p className="text-xs mt-1">ÏòàÏÉÅÌïòÏßÄ Î™ªÌïú ÏÉÅÌÉúÏûÖÎãàÎã§.</p>
                </div>
              )}
            </div>
          ))
        )}
      </div>

      {/* Î°úÎî© ÌëúÏãú Ï∂îÍ∞Ä */}
      {loading && (
        <div className="flex justify-center py-8">
          <div className="flex items-center gap-2 text-gray-500">
            <Loader2 className="w-5 h-5 animate-spin" />
            <span>Îçî Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
          </div>
        </div>
      )}

      {/* Îçî Ïù¥ÏÉÅ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Îïå */}
      {!hasMore && taskList.length > 0 && (
        <div className="text-center py-8 text-gray-500">
          <p>Î™®Îì† ÏΩòÌÖêÏ∏†Î•º Î∂àÎü¨ÏôîÏäµÎãàÎã§.</p>
        </div>
      )}

      <div className="fixed bottom-0 left-0 right-0 z-50 p-6 bg-transparent sm:left-64">
        <div className="max-w-4xl mx-auto">
          <div className="relative">
            <input
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handlePromptSubmit()}
              placeholder="What do you want to see..."
              className="w-full bg-white/90 backdrop-blur-sm border border-gray-200 rounded-2xl px-6 py-4 text-gray-700 placeholder-gray-500 pr-32 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-lg transition-all"
              disabled={isGenerating}
            />
            <div className="absolute right-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
              {/* Î™®Îç∏ ÏÑ†ÌÉù Î≤ÑÌäº */}
              <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="bg-white/90 backdrop-blur-sm border-gray-200 text-gray-700 hover:bg-gray-50"
                  >
                    <Settings className="w-4 h-4 mr-2" />
                    Î™®Îç∏
                  </Button>
                </PopoverTrigger>
                <PopoverContent
                  className="w-[800px] max-h-[600px] p-0"
                  align="end"
                >
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-6">
                      <h4 className="text-xl font-semibold">Choose a Model</h4>
                      <Button variant="ghost" size="sm">
                        <ArrowUpRight className="w-4 h-4" />
                      </Button>
                    </div>

                    {/* ÌÉ≠Î∞î */}
                    <div className="flex space-x-1 mb-6 bg-gray-100 rounded-lg p-1">
                      <button
                        className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                          selectedTab === "STYLE"
                            ? "bg-white text-black shadow-sm"
                            : "text-gray-600 hover:text-black"
                        }`}
                        onClick={() => setSelectedTab("STYLE")}
                      >
                        All
                      </button>
                      <button
                        className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                          selectedTab === "CHARACTER"
                            ? "bg-white text-black shadow-sm"
                            : "text-gray-600 hover:text-black"
                        }`}
                        onClick={() => setSelectedTab("CHARACTER")}
                      >
                        Flux
                      </button>
                      {/* Ï∂îÍ∞Ä ÌÉ≠Îì§... */}
                    </div>

                    {/* Î™®Îç∏ Í∑∏Î¶¨Îìú */}
                    <div className="grid grid-cols-5 gap-4 max-h-80 overflow-y-auto">
                      {availableModels.map((model) => (
                        <div
                          key={model.modelName}
                          className={`relative group cursor-pointer rounded-xl overflow-hidden border-2 transition-all ${
                            tempSelectedModel?.modelName === model.modelName
                              ? "border-blue-500 ring-2 ring-blue-200"
                              : "border-transparent hover:border-gray-300"
                          }`}
                          onClick={() => setTempSelectedModel(model)}
                        >
                          <div className="aspect-[3/4] relative">
                            <img
                              src={model.image}
                              alt={model.name}
                              className="w-full h-full object-cover"
                            />
                            {/* Î™®Îç∏ ÌÉÄÏûÖ Î±ÉÏßÄ */}
                            <div className="absolute top-2 left-2">
                              <span className="bg-black/70 text-white text-xs px-2 py-1 rounded">
                                {selectedTab}
                              </span>
                            </div>
                            {/* New Î±ÉÏßÄ (ÌïÑÏöîÏãú) */}
                            {model.isNew && (
                              <div className="absolute top-2 right-2">
                                <span className="bg-green-500 text-white text-xs px-2 py-1 rounded">
                                  New
                                </span>
                              </div>
                            )}
                            {/* ÏÑ†ÌÉù Ï≤¥ÌÅ¨ÎßàÌÅ¨ */}
                            {tempSelectedModel?.modelName ===
                              model.modelName && (
                              <div className="absolute inset-0 bg-blue-500/20 flex items-center justify-center">
                                <div className="bg-blue-500 text-white rounded-full p-1">
                                  <Check className="w-4 h-4" />
                                </div>
                              </div>
                            )}
                          </div>
                          <div className="p-3 bg-white">
                            <h3 className="font-medium text-sm truncate">
                              {model.name}
                            </h3>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* ÌïòÎã® Î≤ÑÌäºÎì§ */}
                  <div className="border-t p-4 flex justify-between items-center">
                    <div className="text-sm text-gray-600">
                      {tempSelectedModel?.name || "No model selected"}
                    </div>
                    <div className="flex space-x-2">
                      <Button variant="outline" onClick={handleCancel}>
                        Cancel
                      </Button>
                      <Button
                        onClick={handleConfirm}
                        disabled={!tempSelectedModel}
                      >
                        Use Model
                      </Button>
                    </div>
                  </div>
                </PopoverContent>
              </Popover>

              {/* Ï†ÑÏÜ° Î≤ÑÌäº */}
              <button
                onClick={handlePromptSubmit}
                disabled={isGenerating || !prompt.trim()}
                className="bg-black text-white p-2 rounded-full hover:bg-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isGenerating ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <ArrowUp className="w-5 h-5" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
      {/* Ï†ÑÏ≤¥ÌôîÎ©¥ Î™®Îã¨ */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black/90 z-[100] flex items-center justify-center">
          {/* ÏÉÅÎã® Ìó§Îçî */}
          <div className="absolute top-4 left-4 right-4 flex justify-between items-center z-10">
            {/* Ïç∏ÎÑ§Ïùº ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
            <div className="flex gap-2">
              {allMediaItems.map((item, index) => (
                <button
                  key={item.task.id}
                  onClick={() => setSelectedMediaIndex(index)}
                  className={`w-12 h-8 rounded overflow-hidden border-2 transition-colors ${
                    selectedMediaIndex === index
                      ? "border-white"
                      : "border-gray-500 hover:border-gray-300"
                  }`}
                >
                  <video
                    src={item.image.url}
                    className="w-full h-full object-cover"
                    muted
                  />
                </button>
              ))}
            </div>

            {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
            <div className="flex gap-3 text-white">
              <button className="hover:bg-white/20 p-2 rounded-full transition-colors">
                <Heart className="w-5 h-5" />
              </button>
              <button className="hover:bg-white/20 p-2 rounded-full transition-colors">
                <Share2 className="w-5 h-5" />
              </button>
              <button className="hover:bg-white/20 p-2 rounded-full transition-colors">
                <Download className="w-5 h-5" />
              </button>
              <button
                onClick={() => setIsModalOpen(false)}
                className="hover:bg-white/20 p-2 rounded-full transition-colors"
              >
                <MoreHorizontal className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Î©îÏù∏ ÎØ∏ÎîîÏñ¥ */}
          <div className="w-full h-full flex items-center justify-center p-16">
            {allMediaItems[selectedMediaIndex] && (
              <div className="max-w-5xl w-full">
                <video
                  src={allMediaItems[selectedMediaIndex].image.url}
                  controls
                  autoPlay
                  className="w-full rounded-xl shadow-2xl"
                  style={{ maxHeight: "70vh" }}
                />
              </div>
            )}
          </div>

          {/* ÌïòÎã® Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
          <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
            <div className="flex gap-4">
              <Button
                variant="secondary"
                className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
              >
                üí¨ Modify...
              </Button>
              <Button
                variant="secondary"
                className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
              >
                üìΩÔ∏è Extend Video...
              </Button>
              <Button
                variant="secondary"
                className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
              >
                ‚≠ê More Like This
              </Button>
              <Button
                variant="secondary"
                className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
              >
                üñºÔ∏è Reframe
              </Button>
              <Button
                variant="secondary"
                className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
              >
                üìà Upscale...
              </Button>
              <Button
                variant="secondary"
                className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
              >
                üéµ Audio...
              </Button>
            </div>
          </div>

          {/* ESC ÌÇ§Î°ú Îã´Í∏∞ */}
          <div
            className="absolute inset-0"
            onClick={() => setIsModalOpen(false)}
          />
        </div>
      )}
    </>
  );
}
